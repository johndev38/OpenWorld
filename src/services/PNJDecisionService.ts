import { PNJ, Batiment, TypeBatiment, Service } from '../types';
import { DeplacementService } from './DeplacementService';
import { BatimentService } from './BatimentService';
import EventEmitter from 'events';

/**
 * Service qui g√®re les d√©cisions des PNJ en fonction de leurs besoins
 */
export class PNJDecisionService extends EventEmitter {
  private static instance: PNJDecisionService;
  private deplacementService: DeplacementService;
  private batimentService: BatimentService;
  
  // Seuils pour les diff√©rents besoins (en dessous, le besoin devient prioritaire)
  private seuils = {
    faim: 30,
    soif: 25,
    fatigue: 20,
    social: 15,
    divertissement: 10,
    sante: 40
  };

  private constructor() {
    super();
    this.deplacementService = DeplacementService.getInstance();
    this.batimentService = BatimentService.getInstance();
  }

  public static getInstance(): PNJDecisionService {
    if (!PNJDecisionService.instance) {
      PNJDecisionService.instance = new PNJDecisionService();
    }
    return PNJDecisionService.instance;
  }

  /**
   * √âvalue les besoins d'un PNJ et prend une d√©cision sur sa prochaine action
   */
  public evaluerBesoinsEtDecider(pnj: PNJ): Promise<boolean> {
    // Si le PNJ est d√©j√† en d√©placement, ne pas interf√©rer
    if (this.deplacementService.estEnDeplacement(pnj.id)) {
      return Promise.resolve(false);
    }

    console.log(`ü§î D√âCISION: √âvaluation des besoins de ${pnj.nom} - Faim: ${pnj.besoins.faim}, Soif: ${pnj.besoins.soif}, Fatigue: ${pnj.besoins.fatigue}, Social: ${pnj.besoins.social}, Sant√©: ${pnj.sante}`);

    // R√©cup√©rer le besoin le plus urgent
    const besoinUrgent = this.trouverBesoinPrioritaire(pnj);
    
    if (!besoinUrgent) {
      console.log(`üòå D√âCISION: ${pnj.nom} n'a pas de besoin urgent, il continue son activit√© actuelle (${pnj.etatActuel.activite})`);
      return Promise.resolve(false);
    }

    console.log(`‚ö†Ô∏è D√âCISION: ${pnj.nom} a un besoin urgent: ${besoinUrgent.type} (${besoinUrgent.valeur})`);
    
    // Trouver un b√¢timent qui r√©pond √† ce besoin
    const batiment = this.trouverBatimentPourBesoin(besoinUrgent.type, pnj);
    
    if (!batiment) {
      console.log(`‚ùå D√âCISION: Aucun b√¢timent disponible pour r√©pondre au besoin ${besoinUrgent.type} de ${pnj.nom}`);
      return Promise.resolve(false);
    }

    console.log(`üè¢ D√âCISION: ${pnj.nom} a choisi le b√¢timent ${batiment.nom} (${batiment.id}) en [${batiment.position.x}, ${batiment.position.y}] pour son besoin de ${besoinUrgent.type}`);

    // Mettre √† jour l'√©tat du PNJ en fonction du besoin
    this.mettreAJourEtatPNJ(pnj, besoinUrgent.type);
    
    // D√©placer le PNJ vers le b√¢timent
    console.log(`‚úÖ D√âCISION: ${pnj.nom} se dirige vers ${batiment.nom} pour satisfaire son besoin de ${besoinUrgent.type}`);
    
    return this.deplacementService.deplacerVers(pnj, batiment.position, batiment.id);
  }

  /**
   * Trouve le besoin le plus urgent d'un PNJ
   */
  private trouverBesoinPrioritaire(pnj: PNJ): { type: string; valeur: number } | null {
    const besoins = [
      { type: 'faim', valeur: pnj.besoins.faim, seuil: this.seuils.faim },
      { type: 'soif', valeur: pnj.besoins.soif, seuil: this.seuils.soif },
      { type: 'fatigue', valeur: pnj.besoins.fatigue, seuil: this.seuils.fatigue },
      { type: 'social', valeur: pnj.besoins.social, seuil: this.seuils.social },
      { type: 'divertissement', valeur: pnj.besoins.divertissement, seuil: this.seuils.divertissement },
      { type: 'sante', valeur: pnj.sante, seuil: this.seuils.sante }
    ];

    // Filtrer les besoins qui sont en dessous du seuil
    const besoinsUrgents = besoins.filter(b => b.valeur < b.seuil);
    
    if (besoinsUrgents.length === 0) {
      return null;
    }

    // Trier par ordre croissant de valeur (le plus bas = le plus urgent)
    besoinsUrgents.sort((a, b) => a.valeur - b.valeur);
    
    return { type: besoinsUrgents[0].type, valeur: besoinsUrgents[0].valeur };
  }

  /**
   * Trouve un b√¢timent appropri√© pour r√©pondre √† un besoin
   */
  private trouverBatimentPourBesoin(typeBesoin: string, pnj: PNJ): Batiment | null {
    let service: Service | undefined;
    let typeBatiment: TypeBatiment | undefined;
    
    // Associer le besoin √† un service ou type de b√¢timent
    switch (typeBesoin) {
      case 'faim':
        service = 'repas';
        break;
      case 'soif':
        service = 'boissons';
        break;
      case 'fatigue':
        service = 'repos';
        break;
      case 'social':
        service = 'boissons'; // Les tavernes sont bonnes pour socialiser
        break;
      case 'divertissement':
        // Selon la personnalit√© du PNJ, diff√©rents types de divertissement
        if (pnj.personnalite === 'sage' || pnj.personnalite === 'myst√©rieux') {
          typeBatiment = 'bibliotheque';
        } else {
          typeBatiment = 'taverne';
        }
        break;
      case 'sante':
        service = 'soins';
        break;
      default:
        return null;
    }

    let batiments: Batiment[] = [];
    
    if (service) {
      // Trouver tous les b√¢timents offrant ce service
      batiments = this.batimentService.getAllBatiments().filter(b => b.services.includes(service));
    } else if (typeBatiment) {
      // Ou trouver tous les b√¢timents de ce type
      batiments = this.batimentService.getBatimentsParType(typeBatiment);
    }

    if (batiments.length === 0) {
      return null;
    }

    // Trouver le b√¢timent le plus proche parmi ceux disponibles
    return this.trouverBatimentLePlusProche(batiments, pnj);
  }

  /**
   * Trouve le b√¢timent le plus proche parmi une liste de b√¢timents
   */
  private trouverBatimentLePlusProche(batiments: Batiment[], pnj: PNJ): Batiment | null {
    if (batiments.length === 0) {
      return null;
    }

    // Trier les b√¢timents par distance
    batiments.sort((a, b) => {
      const distanceA = this.calculerDistance(pnj.localisation.position, a.position);
      const distanceB = this.calculerDistance(pnj.localisation.position, b.position);
      return distanceA - distanceB;
    });

    return batiments[0];
  }

  /**
   * Calcule la distance euclidienne entre deux positions
   */
  private calculerDistance(pos1: { x: number; y: number }, pos2: { x: number; y: number }): number {
    const dx = pos2.x - pos1.x;
    const dy = pos2.y - pos1.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  /**
   * Met √† jour l'√©tat du PNJ en fonction du besoin √† satisfaire
   */
  private mettreAJourEtatPNJ(pnj: PNJ, typeBesoin: string): void {
    switch (typeBesoin) {
      case 'faim':
      case 'soif':
        pnj.etatActuel.activite = 'repas';
        break;
      case 'fatigue':
        pnj.etatActuel.activite = 'repos';
        break;
      case 'social':
        pnj.etatActuel.activite = 'social';
        break;
      case 'divertissement':
        pnj.etatActuel.activite = 'loisir';
        break;
      case 'sante':
        // On pourrait cr√©er une nouvelle activit√© "soin" si n√©cessaire
        pnj.etatActuel.activite = 'repos';
        break;
    }

    // Ajouter une entr√©e dans l'historique
    pnj.historique.push({
      timestamp: Date.now(),
      etat: pnj.etatActuel,
      action: `${pnj.nom} a d√©cid√© de satisfaire son besoin de ${typeBesoin}.`
    });
  }

  /**
   * Simuler l'effet de l'action sur les besoins du PNJ (√† appeler apr√®s l'arriv√©e)
   */
  public satisfaireBesoin(pnj: PNJ, batimentId: string): void {
    const batiment = this.batimentService.getBatiment(batimentId);
    
    if (!batiment) {
      console.log(`‚ùå SATISFACTION: Impossible de satisfaire les besoins de ${pnj.nom}, b√¢timent ${batimentId} non trouv√©`);
      return;
    }

    console.log(`üè¢ SATISFACTION: ${pnj.nom} satisfait ses besoins √† ${batiment.nom} (${batiment.type}) - Services: [${batiment.services.join(', ')}]`);
    console.log(`üìä SATISFACTION: Besoins avant - Faim: ${pnj.besoins.faim}, Soif: ${pnj.besoins.soif}, Fatigue: ${pnj.besoins.fatigue}, Social: ${pnj.besoins.social}, Sant√©: ${pnj.sante}`);

    // Mettre √† jour les besoins en fonction des services du b√¢timent
    if (batiment.services.includes('repas')) {
      pnj.besoins.faim = Math.min(100, pnj.besoins.faim + 50);
      console.log(`üçΩÔ∏è SATISFACTION: ${pnj.nom} s'est restaur√© √† ${batiment.nom}. Faim: ${pnj.besoins.faim}`);
    }
    
    if (batiment.services.includes('boissons')) {
      pnj.besoins.soif = Math.min(100, pnj.besoins.soif + 60);
      console.log(`ü•§ SATISFACTION: ${pnj.nom} a √©tanch√© sa soif √† ${batiment.nom}. Soif: ${pnj.besoins.soif}`);
    }
    
    if (batiment.services.includes('repos')) {
      pnj.besoins.fatigue = Math.min(100, pnj.besoins.fatigue + 40);
      pnj.energie = Math.min(100, pnj.energie + 30);
      console.log(`üò¥ SATISFACTION: ${pnj.nom} s'est repos√© √† ${batiment.nom}. Fatigue: ${pnj.besoins.fatigue}, √ânergie: ${pnj.energie}`);
    }
    
    if (batiment.type === 'taverne' || batiment.type === 'marche') {
      pnj.besoins.social = Math.min(100, pnj.besoins.social + 45);
      pnj.besoins.divertissement = Math.min(100, pnj.besoins.divertissement + 25);
      console.log(`üë• SATISFACTION: ${pnj.nom} a socialis√© √† ${batiment.nom}. Social: ${pnj.besoins.social}, Divertissement: ${pnj.besoins.divertissement}`);
    }
    
    if (batiment.services.includes('soins')) {
      pnj.sante = Math.min(100, pnj.sante + 70);
      console.log(`üè• SATISFACTION: ${pnj.nom} a re√ßu des soins √† ${batiment.nom}. Sant√©: ${pnj.sante}`);
    }

    console.log(`üìà SATISFACTION: Besoins apr√®s - Faim: ${pnj.besoins.faim}, Soif: ${pnj.besoins.soif}, Fatigue: ${pnj.besoins.fatigue}, Social: ${pnj.besoins.social}, Sant√©: ${pnj.sante}`);

    // Ajouter une entr√©e dans l'historique
    pnj.historique.push({
      timestamp: Date.now(),
      etat: pnj.etatActuel,
      action: `${pnj.nom} a satisfait ses besoins √† ${batiment.nom}.`
    });
  }
} 