import { simulationPathfinding } from './simulationPathfinding';
import { PNJ } from './types';
import * as fs from 'fs';
import * as path from 'path';
import { initialiserEnvironnement } from './environnement';

// Fonction pour charger ou cr√©er un PNJ de test
function creerPNJTest(): PNJ {
  const pnj: PNJ = {
    id: 'test-pnj-1',
    nom: 'Jean Testeur',
    age: 35,
    profession: 'forgeron',
    personnalite: 'amical',
    localisation: {
      exterieur: true,
      position: { x: 0, y: 0 } // Position de d√©part
    },
    sante: 90,
    bonheur: 70,
    background: 'Un forgeron exp√©riment√© qui a grandi dans le village.',
    besoins: {
      faim: 70,
      soif: 80,
      fatigue: 60,
      social: 50,
      divertissement: 40,
      energie: 75
    },
    etatActuel: {
      activite: 'repos'
    },
    historique: [
      {
        timestamp: Date.now(),
        etat: { activite: 'repos' },
        action: 'Jean commence sa journ√©e.'
      }
    ],
    energie: 80
  };
  
  return pnj;
}

// Fonction de d√©monstration d'une urgence de sant√©
function demontrerUrgenceSante(pnj: PNJ): void {
  console.log("\n--- D√âMONSTRATION: URGENCE DE SANT√â ---");
  console.log(`√âtat initial de ${pnj.nom}: Sant√© = ${pnj.sante}`);
  
  // Simuler une urgence de sant√©
  simulationPathfinding.simulerUrgenceSante(pnj);
  
  console.log("Le PNJ va maintenant chercher un b√¢timent offrant des soins...");
}

// Fonction de d√©monstration d'une forte faim
function demontrerFaim(pnj: PNJ): void {
  console.log("\n--- D√âMONSTRATION: FAIM ---");
  console.log(`√âtat initial de ${pnj.nom}: Faim = ${pnj.besoins.faim}`);
  
  // Simuler une forte faim
  simulationPathfinding.simulerFaim(pnj);
  
  console.log("Le PNJ va maintenant chercher un endroit o√π manger...");
}

// Fonction principale
async function demarrerDemonstration(): Promise<void> {
  // S'assurer que l'environnement est initialis√©
  initialiserEnvironnement();
  
  // Cr√©er un PNJ de test
  const pnj = creerPNJTest();
  console.log(`üìã INITIALISATION: PNJ de test cr√©√© - ${pnj.nom} (${pnj.profession})`);
  console.log(`üìä √âTAT INITIAL: Position: [${pnj.localisation.position.x}, ${pnj.localisation.position.y}], Sant√©: ${pnj.sante}, Faim: ${pnj.besoins.faim}, Activit√©: ${pnj.etatActuel.activite}`);
  
  // Configurer la simulation avec ce PNJ
  simulationPathfinding.setPNJs([pnj]);
  
  // √âcouter les √©v√©nements de la simulation
  simulationPathfinding.on('pnj:arrive', (pnj, batimentId) => {
    console.log(`\nüèÅ √âV√âNEMENT: ${pnj.nom} est arriv√© √† destination ${batimentId ? `(${batimentId})` : ''}`);
    console.log(`üìç POSITION: [${pnj.localisation.position.x}, ${pnj.localisation.position.y}]`);
    console.log(`üìä √âTAT: Sant√©: ${pnj.sante}, Faim: ${pnj.besoins.faim}, Activit√©: ${pnj.etatActuel.activite}`);
  });
  
  simulationPathfinding.on('pnj:urgence', (pnj) => {
    console.log(`\nüö® √âV√âNEMENT: Urgence d√©clench√©e pour ${pnj.nom}`);
    console.log(`üìç POSITION: [${pnj.localisation.position.x}, ${pnj.localisation.position.y}]`);
    console.log(`üìä √âTAT: Sant√©: ${pnj.sante}, Faim: ${pnj.besoins.faim}, Activit√©: ${pnj.etatActuel.activite}`);
  });
  
  simulationPathfinding.on('pnj:faim', (pnj) => {
    console.log(`\nüçΩÔ∏è √âV√âNEMENT: Alerte de faim d√©clench√©e pour ${pnj.nom}`);
    console.log(`üìç POSITION: [${pnj.localisation.position.x}, ${pnj.localisation.position.y}]`);
    console.log(`üìä √âTAT: Sant√©: ${pnj.sante}, Faim: ${pnj.besoins.faim}, Activit√©: ${pnj.etatActuel.activite}`);
  });
  
  simulationPathfinding.on('simulation:tick', (environnement) => {
    console.log(`\n‚è±Ô∏è TICK: Jour ${environnement.jour}, ${environnement.heure}:${environnement.minute.toString().padStart(2, '0')} - M√©t√©o: ${environnement.meteo}`);
    console.log(`üìç POSITION DE ${pnj.nom}: [${pnj.localisation.position.x}, ${pnj.localisation.position.y}]${pnj.localisation.batimentId ? ` (dans ${pnj.localisation.batimentId})` : ' (ext√©rieur)'}`);
    console.log(`üìä BESOINS: Faim: ${pnj.besoins.faim}, Soif: ${pnj.besoins.soif}, Fatigue: ${pnj.besoins.fatigue}, Social: ${pnj.besoins.social}, Divertissement: ${pnj.besoins.divertissement}`);
    console.log(`‚ù§Ô∏è SANT√â: ${pnj.sante}, √ânergie: ${pnj.energie}, Bonheur: ${pnj.bonheur}`);
    console.log(`üß† ACTIVIT√â: ${pnj.etatActuel.activite}${pnj.etatActuel.batimentCible ? ` (destination: ${pnj.etatActuel.batimentCible})` : ''}`);
  });
  
  // D√©marrer la simulation
  console.log("=== üöÄ D√âMARRAGE DE LA D√âMONSTRATION DE PATHFINDING ===");
  simulationPathfinding.demarrer();
  
  // Attendre 10 secondes avant de simuler une urgence
  setTimeout(() => {
    demontrerUrgenceSante(pnj);
  }, 10000);
  
  // Attendre 30 secondes avant de simuler une faim
  setTimeout(() => {
    demontrerFaim(pnj);
  }, 30000);
  
  // Arr√™ter la simulation apr√®s 60 secondes
  setTimeout(() => {
    simulationPathfinding.pause();
    console.log("\n=== üèÅ FIN DE LA D√âMONSTRATION ===");
    
    // Afficher l'historique du PNJ
    console.log("\nüìú HISTORIQUE DES ACTIONS DU PNJ:");
    pnj.historique.forEach((entry, index) => {
      const date = new Date(entry.timestamp);
      console.log(`${index + 1}. [${date.toLocaleTimeString()}] ${entry.action} (Activit√©: ${entry.etat.activite})`);
    });
    
    // Afficher un r√©sum√© final
    console.log("\nüìä R√âSUM√â FINAL:");
    console.log(`Position finale: [${pnj.localisation.position.x}, ${pnj.localisation.position.y}]${pnj.localisation.batimentId ? ` (dans ${pnj.localisation.batimentId})` : ' (ext√©rieur)'}`);
    console.log(`Besoins: Faim: ${pnj.besoins.faim}, Soif: ${pnj.besoins.soif}, Fatigue: ${pnj.besoins.fatigue}, Social: ${pnj.besoins.social}`);
    console.log(`Sant√©: ${pnj.sante}, √ânergie: ${pnj.energie}, Bonheur: ${pnj.bonheur}`);
    console.log(`Activit√© finale: ${pnj.etatActuel.activite}`);
    console.log(`Nombre d'actions r√©alis√©es: ${pnj.historique.length}`);
  }, 60000);
}

// Lancer la d√©monstration
demarrerDemonstration().catch(console.error); 