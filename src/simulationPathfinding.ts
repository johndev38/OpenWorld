import { PNJ } from './types';
import { DeplacementService } from './services/DeplacementService';
import { PNJDecisionService } from './services/PNJDecisionService';
import { PathfindingService } from './services/PathfindingService';
import { BatimentService } from './services/BatimentService';
import { 
  getEnvironnement, 
  avancerTemps, 
  initialiserEnvironnement,
  mettreAJourBesoinsPNJ 
} from './environnement';
import EventEmitter from 'events';

export class SimulationPathfinding extends EventEmitter {
  private static instance: SimulationPathfinding;
  private pnjs: PNJ[] = [];
  private intervalId: NodeJS.Timeout | null = null;
  private enPause: boolean = true;
  
  // Services
  private deplacementService: DeplacementService;
  private pnjDecisionService: PNJDecisionService;
  private pathfindingService: PathfindingService;
  private batimentService: BatimentService;
  
  // Configuration de simulation
  private intervalTemps: number = 1000; // ms entre chaque tick
  private minutesParTick: number = 5; // minutes qui passent par tick
  
  private constructor() {
    super();
    this.deplacementService = DeplacementService.getInstance();
    this.pnjDecisionService = PNJDecisionService.getInstance();
    this.pathfindingService = PathfindingService.getInstance();
    this.batimentService = BatimentService.getInstance();
    
    // Configurer les √©couteurs d'√©v√©nements
    this.deplacementService.on('arrivee', this.handlePNJArrivee.bind(this));
    
    // Initialiser l'environnement
    initialiserEnvironnement();
    
    // Initialiser la carte de pathfinding avec les b√¢timents
    this.mettreAJourCartePathfinding();
  }
  
  public static getInstance(): SimulationPathfinding {
    if (!SimulationPathfinding.instance) {
      SimulationPathfinding.instance = new SimulationPathfinding();
    }
    return SimulationPathfinding.instance;
  }
  
  /**
   * D√©finit les PNJ √† simuler
   */
  public setPNJs(pnjs: PNJ[]): void {
    this.pnjs = pnjs;
    console.log(`Simulation configur√©e avec ${pnjs.length} PNJs`);
  }
  
  /**
   * D√©marre la simulation
   */
  public demarrer(): void {
    if (!this.enPause) return;
    
    this.enPause = false;
    console.log("D√©marrage de la simulation...");
    
    // Afficher la carte au d√©marrage
    this.afficherCarte();
    
    this.intervalId = setInterval(() => {
      this.tick();
    }, this.intervalTemps);
    
    this.emit('simulation:demarree');
  }
  
  /**
   * Met en pause la simulation
   */
  public pause(): void {
    if (this.enPause) return;
    
    this.enPause = true;
    
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    
    console.log("Simulation en pause");
    this.emit('simulation:pause');
  }
  
  /**
   * R√©initialise la simulation
   */
  public reinitialiser(): void {
    this.pause();
    initialiserEnvironnement();
    this.mettreAJourCartePathfinding();
    console.log("Simulation r√©initialis√©e");
    this.emit('simulation:reinitialisee');
  }
  
  /**
   * Ex√©cute un tick de simulation
   */
  private tick(): void {
    // Avancer le temps
    avancerTemps(this.minutesParTick);
    
    // Mettre √† jour les besoins des PNJ
    try {
      console.log(`Tentative de mise √† jour des besoins pour ${this.pnjs.length} PNJ(s)...`);
      mettreAJourBesoinsPNJ(this.pnjs, this.minutesParTick);
    } catch (error) {
      console.error('Erreur lors de la mise √† jour des besoins:', error);
    }
    
    // Mettre √† jour les d√©placements en cours
    this.deplacementService.mettreAJourDeplacements(this.pnjs);
    
    // Pour chaque PNJ, prendre des d√©cisions en fonction des besoins
    this.pnjs.forEach(pnj => {
      this.pnjDecisionService.evaluerBesoinsEtDecider(pnj)
        .then(decisionPrise => {
          if (decisionPrise) {
            console.log(`${pnj.nom} a pris une nouvelle d√©cision`);
          }
        });
    });
    
    // √âmettre un √©v√©nement tick
    this.emit('simulation:tick', getEnvironnement());
  }
  
  /**
   * G√®re l'arriv√©e d'un PNJ √† sa destination
   */
  private handlePNJArrivee(pnj: PNJ, batimentId?: string): void {
    if (batimentId) {
      // Entrer dans le b√¢timent
      console.log(`${pnj.nom} est arriv√© √† ${batimentId} et tente d'y entrer`);
      
      // V√©rifier si le PNJ peut entrer dans le b√¢timent
      const batiment = this.batimentService.getBatiment(batimentId);
      if (batiment && batiment.occupants.length < batiment.capacite) {
        // Mettre √† jour la localisation du PNJ
        pnj.localisation.batimentId = batiment.id;
        pnj.localisation.exterieur = false;
        
        // Ajouter le PNJ aux occupants du b√¢timent
        this.batimentService.ajouterOccupant(batiment.id, pnj.id);
        
        console.log(`${pnj.nom} est entr√© dans ${batiment.nom}`);
        
        // Satisfaire les besoins du PNJ
        this.pnjDecisionService.satisfaireBesoin(pnj, batiment.id);
      } else {
        console.log(`${pnj.nom} n'a pas pu entrer dans le b√¢timent (plein ou ferm√©)`);
      }
    }
    
    this.emit('pnj:arrive', pnj, batimentId);
  }
  
  /**
   * Met √† jour la carte de pathfinding avec les b√¢timents actuels
   */
  private mettreAJourCartePathfinding(): void {
    const batiments = this.batimentService.getAllBatiments();
    this.pathfindingService.mettreAJourCarte(batiments);
    console.log(`Carte de pathfinding mise √† jour avec ${batiments.length} b√¢timents`);
  }
  
  /**
   * Simule une urgence de sant√© pour un PNJ
   */
  public simulerUrgenceSante(pnj: PNJ): void {
    // Diminuer drastiquement la sant√© du PNJ
    pnj.sante = 10;
    console.log(`URGENCE: ${pnj.nom} a un probl√®me de sant√© (sant√©: ${pnj.sante})`);
    
    // Forcer une √©valuation imm√©diate des besoins
    this.pnjDecisionService.evaluerBesoinsEtDecider(pnj)
      .then(decisionPrise => {
        if (decisionPrise) {
          console.log(`${pnj.nom} cherche de l'aide m√©dicale`);
          this.emit('pnj:urgence', pnj);
        }
      });
  }
  
  /**
   * Simule une forte faim pour un PNJ
   */
  public simulerFaim(pnj: PNJ): void {
    // Diminuer drastiquement la nourriture du PNJ
    pnj.besoins.faim = 5;
    console.log(`ALERTE: ${pnj.nom} a tr√®s faim (faim: ${pnj.besoins.faim})`);
    
    // Forcer une √©valuation imm√©diate des besoins
    this.pnjDecisionService.evaluerBesoinsEtDecider(pnj)
      .then(decisionPrise => {
        if (decisionPrise) {
          console.log(`${pnj.nom} cherche √† manger`);
          this.emit('pnj:faim', pnj);
        }
      });
  }
  
  /**
   * Affiche une visualisation simple de la carte avec les obstacles
   */
  public afficherCarte(): void {
    const batiments = this.batimentService.getAllBatiments();
    
    // Cr√©er une matrice pour la visualisation
    const tailleGrille = 25; // Taille r√©duite pour l'affichage
    const grille: string[][] = Array(tailleGrille).fill(0).map(() => Array(tailleGrille).fill(' . ')); // Point = case libre
    
    console.log("\nüó∫Ô∏è VISUALISATION DE LA CARTE:");
    
    // Ajouter les b√¢timents √† la grille
    batiments.forEach(batiment => {
      const x = Math.floor(batiment.position.x) + Math.floor(tailleGrille/2); // Centrer sur la carte
      const y = Math.floor(batiment.position.y) + Math.floor(tailleGrille/2);
      
      if (x >= 0 && x < tailleGrille && y >= 0 && y < tailleGrille) {
        // Repr√©sentation en fonction du type de b√¢timent
        switch (batiment.type) {
          case 'maison':
            grille[y][x] = ' üè† ';
            break;
          case 'taverne':
            grille[y][x] = ' üç∫ ';
            break;
          case 'forge':
            grille[y][x] = ' üî® ';
            break;
          case 'bibliotheque':
            grille[y][x] = ' üìö ';
            break;
          case 'marche':
            grille[y][x] = ' üõí ';
            break;
          case 'temple':
            grille[y][x] = ' ‚õ™ ';
            break;
          case 'caserne':
            grille[y][x] = ' üõ°Ô∏è ';
            break;
          default:
            grille[y][x] = ' üè¢ ';
        }
      }
    });
    
    // Ajouter les PNJs √† la grille
    this.pnjs.forEach(pnj => {
      const x = Math.floor(pnj.localisation.position.x) + Math.floor(tailleGrille/2);
      const y = Math.floor(pnj.localisation.position.y) + Math.floor(tailleGrille/2);
      
      if (x >= 0 && x < tailleGrille && y >= 0 && y < tailleGrille) {
        grille[y][x] = ' üë§ '; // Repr√©sentation d'un PNJ
      }
    });
    
    // Afficher la grille
    let carteTxt = '';
    for (let y = 0; y < tailleGrille; y++) {
      let ligne = '';
      for (let x = 0; x < tailleGrille; x++) {
        ligne += grille[y][x];
      }
      carteTxt += ligne + '\n';
    }
    
    // Afficher une l√©gende
    console.log(carteTxt);
    console.log("L√©gende: üë§ = PNJ, üè† = Maison, üç∫ = Taverne, üî® = Forge, üìö = Biblioth√®que, üõí = March√©, ‚õ™ = Temple, üõ°Ô∏è = Caserne");
    
    // Afficher les coordonn√©es des b√¢timents
    console.log("\nCoordonn√©es des b√¢timents:");
    batiments.forEach(batiment => {
      console.log(`${batiment.nom} (${batiment.type}): [${batiment.position.x}, ${batiment.position.y}]`);
    });
  }
}

export const simulationPathfinding = SimulationPathfinding.getInstance(); 